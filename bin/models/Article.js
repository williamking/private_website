// Generated by LiveScript 1.3.1
(function(){
  var mongoose, ObjectId, ArticleSchema, ArticleModel;
  mongoose = require('mongoose');
  ObjectId = mongoose.Schema.Types.ObjectId;
  ArticleSchema = new mongoose.Schema({
    title: {
      type: 'String',
      required: true
    },
    createAt: {
      type: Date,
      'default': Date.now
    },
    author: {
      _id: {
        type: ObjectId,
        ref: 'User'
      },
      name: String
    },
    lastEditAt: {
      type: Date,
      'default': Date.now
    },
    content: String,
    category: [String],
    secret: Boolean,
    secretPassword: {
      type: 'String',
      require: true
    },
    comments: [{
      content: String,
      commentor: {
        type: ObjectId,
        ref: 'User'
      },
      replyTo: {
        type: ObjectId,
        ref: 'User'
      },
      commentAt: Date
    }]
  });
  ArticleModel = mongoose.model('Article', ArticleSchema);
  ArticleModel.createArticle = function(title, content, author, category, secret, secretPassword, callback){
    var article;
    article = new ArticleModel({
      title: title,
      author: author,
      content: content,
      secret: secret,
      secretPassword: secretPassword,
      comments: []
    });
    article.save(callback);
  };
  ArticleModel.findIndex = function(callback){
    ArticleModel.find({}).sort({
      'create-at': 1
    }).select('title author createAt').exec(callback);
  };
  ArticleModel.findById(function(id, callback){
    ArticleModel.findOne({
      _id: id
    }).exec(callback);
  });
  ArticleModel.findByCategory = function(author, category, callback){
    ArticleModel.find({
      'category': category,
      'author': author
    }).sort({
      'create-at': 1
    }).exec(callback);
  };
  ArticleModel.updateContent = function(id, content, callback){
    ArticleModel.findOne({
      _id: id
    }, function(err, article){
      if (article) {
        article.content = content;
        article.save(function(){
          callback();
        });
      } else {
        callback(1, null);
      }
    });
  };
  ArticleModel.addComment = function(id, content, commentor, replyTo, callback){
    ArticleModel.findOne({
      _id: id
    }, function(err, article){
      var newComent;
      if (err) {
        callback(0, null);
      } else {
        if (article) {
          newComent = {
            content: content,
            commentor: commentor,
            replyTo: replyTo,
            commentAt: new Date()
          };
          article.comments.push(newContent);
          article.save(callback);
        } else {
          callback(0, null);
        }
      }
    });
  };
  ArticleModel.getComments = function(id, callback){
    ArticleModel.findOne({
      _id: _id,
      id: id
    }, function(err, article){
      if (err) {
        callback(1, null);
      } else {
        if (article) {
          article.aggregate().unwind('comments').sort({
            "comment-at": 1
          }).group({
            _id: '$_id',
            comments: {
              $push: '$coments'
            }
          }).exec().then(function(article){
            return ArticleModel.populate(article, [
              {
                path: 'comments.commentor',
                select: 'name'
              }, {
                path: 'comments.reply-to',
                select: 'name'
              }
            ]);
          }.then(function(article){
            return callback(0, article.comments);
          }));
        } else {
          callback(1, null);
        }
      }
    });
  };
  ArticleModel.drop = function(id, callback){
    ArticleModel.remove({
      _id: id
    }, callback);
  };
  module.exports = ArticleModel;
}).call(this);
