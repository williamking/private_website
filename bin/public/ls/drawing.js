// Generated by LiveScript 1.3.1
(function(){
  $(function(){
    var that, canvas, canvasListener, drawingFrame, iFrame;
    if (that = window.location.pathname === '/factory/drawing') {
      canvas = $('#canvas');
      canvas[0].height = 600;
      canvas[0].width = 800;
      canvasListener = function(canvas){
        var that, func;
        this.canvas = canvas;
        that = this;
        func = function(obj){
          var that;
          that = obj;
          return that.dealEvents;
        };
        this.canvas.click = func(this);
        this.events = [];
      };
      canvasListener.prototype.addEvent = function(x, y, width, height, callback){
        var newEvent;
        newEvent = {
          x: x,
          y: y,
          width: width,
          height: height,
          callback: callback
        };
        this.events.push(newEvent);
      };
      canvasListener.prototype.dealEvents = function(e){
        var eventX, eventY, i$, ref$, len$, event;
        if (e.layerX || e.layerX == 0) {
          eventX = e.layerX;
          eventY = e.layerY;
        } else {
          if (e.offsetX || e.layerX == 0) {
            eventX = e.offsetX;
            eventY = e.effsetY;
          }
        }
        for (i$ = 0, len$ = (ref$ = that.events).length; i$ < len$; ++i$) {
          event = ref$[i$];
          if (eventX >= event.x && eventX < event.x + event.width && eventY >= event.y && eventY < event.y + event.height) {
            event.callback();
          }
        }
      };
      drawingFrame = function(){
        this.canvas = canvas[0];
        this.context = canvas[0].getContext('2d');
        this.listener = new canvasListener(canvas);
        this.originX = 0;
        this.originY = 40;
        this.height = canvas[0].height - this.originX;
        this.width = canvas[0].width - this.originY;
        this.numOfButtons = 0;
        this.BUTTON_MARGIN = 4;
        this.BUTTON_SHADOW_COLOR = 'rgba(0, 0, 0, 0.7)';
        this.BUTTON_SHADOW_OFFSET = 1;
        this.BUTTON_SHADOW_BLUR = 2;
        this.BUTTON_HEIGHT = 20;
        return this.BUTTON_WIDTH = 50;
      };
      drawingFrame.prototype.init = function(){
        return this.context.clearRect(this.originX, this.originY, this.width, this.height);
      };
      drawingFrame.prototype.rectTest = function(){
        var that, context;
        that = this;
        this.init();
        context = this.context;
        context.lineWidth = 20;
        context.font = '24px Helvetica';
        context.fillText('Click anywhere to erase', 175, 40);
        context.strokeRect(75, 100, 200, 200);
        context.fillRect(325, 100, 200, 200);
        context.canvas.onmousedown = function(e){
          that.init();
          return context.canvas.onmousedown = null;
        };
      };
      drawingFrame.prototype.colorTest = function(){
        var that, context;
        that = this;
        context = this.context;
        this.init();
        context.font = '24px Helvetica';
        context.fillText('Click anywhere to erase', 175, 200);
        context.strokeStyle = 'goldenrod';
        context.fillStyle = 'rgba(0, 0, 255, 0.5)';
        context.strokeRect(75, 100, 200, 200);
        context.fillRect(325, 100, 200, 200);
        context.canvas.onmousedown = function(e){
          that.init();
          return context.canvas.onmousedown = null;
        };
      };
      drawingFrame.prototype.testLinearGardient = function(){
        var gradient;
        gradient = this.context.createLinearGradient(this.originX, this.originY, this.width, this.originY);
        gradient.addColorStop(0, 'blue');
        gradient.addColorStop(0.25, 'white');
        gradient.addColorStop(0.5, 'red');
        gradient.addColorStop(0.75, 'green');
        gradient.addColorStop(1, 'purple');
        this.context.fillStyle = gradient;
        this.context.rect(this.originX, this.originY, this.width, this.height);
        this.context.fill();
      };
      drawingFrame.prototype.testRidialGradient = function(){
        var gradient;
        gradient = this.context.createRadialGradient(this.width / 2, this.height, 10, this.width / 2, 0, 100);
        gradient.addColorStop(0, 'blue');
        gradient.addColorStop(0.25, 'white');
        gradient.addColorStop(0.5, 'red');
        gradient.addColorStop(0.75, 'green');
        gradient.addColorStop(1, 'purple');
        this.context.fillStyle = gradient;
        this.context.rect(this.originX, this.originY, this.width, this.height);
        this.context.fill();
      };
      drawingFrame.prototype.addButton = function(text, callback){
        var x;
        this.shadowColor = this.BUTTON_SHADOW_COLOR;
        this.shadowOffsetX = this.shadowOffsetY = this.BUTTON_SHADOW_OFFSET;
        this.shadowBlur = this.BUTTON_SHADOW_BLUR;
        x = (this.BUTTON_WIDTH + this.BUTTON_MARGIN) * this.numOfButtons;
        this.context.strokeRect(x, 0, this.BUTTON_WIDTH, this.BUTTON_HEIGHT);
        this.context.font = '10px Helvetica';
        this.context.fillText(text, x + 10, 10);
        ++this.numOfButtons;
        if (callback) {
          this.listener.addEvent(x, 0, this.BUTTON_WIDTH, this.BUTTON_HEIGHT, callback);
        }
      };
      drawingFrame.prototype.drawBounding = function(){
        var context;
        context = this.context;
        context.lineWidth = 1;
        context.beginPath();
        context.moveTo(0, this.originY);
        context.lineTo(this.originX + this.width, this.originY);
        context.stroke();
      };
      iFrame = new drawingFrame();
      iFrame.drawBounding();
      iFrame.addButton("eraser", function(){
        return alert("hehe");
      });
      iFrame.addButton("line");
      iFrame.addButton("curve");
      return iFrame.testRidialGradient();
    }
  });
}).call(this);
