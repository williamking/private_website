// Generated by LiveScript 1.3.1
(function(){
  var mongoose, bcrypt, UserSchema, User;
  mongoose = require('mongoose');
  bcrypt = require('bcrypt');
  UserSchema = new mongoose.Schema({
    name: {
      type: String,
      validate: {
        validator: function(name){
          return /^[a-zA-Z0-9]{4,}$/.test(name);
        },
        message: 'The length of username should be at least 4!'
      }
    },
    password: String,
    email: {
      type: String,
      validate: {
        validator: function(email){
          return /^([a-zA-Z0-9\u4e00-\u9fa5]+[_|\_|\.-]?)*[a-zA-Z0-9\u4e00-\u9fa5]+@([a-zA-Z0-9]+[_|\_|\.]?)*[a-zA-Z0-9]+\.[a-zA-Z]{2,3}$/.test(email);
        },
        message: 'Invalid form of email.'
      }
    },
    signature: String,
    qq: String,
    birthday: Date,
    hobbies: [String],
    type: {
      type: String,
      'default': 'visitor'
    }
  });
  User = mongoose.model('User', UserSchema);
  User.register = function(name, password, type, email, signature, qq, birthday, callback){
    User.findOne({
      name: name
    }, function(err, user){
      var salt, hash, newUser;
      if (user) {
        return callback({
          message: 'Dulplicated username'
        });
      }
      salt = bcrypt.genSaltSync(10);
      hash = bcrypt.hashSync(password, salt);
      console.log('2');
      newUser = {
        name: name,
        password: hash,
        type: type,
        email: email,
        signature: signature,
        qq: qq,
        birthday: birthday,
        hobbies: []
      };
      console.log(newUser);
      return User.create(newUser, callback);
    });
  };
  User.changeInfo = function(userId, value, type, callback){
    User.findOne({
      _id: userId
    }, function(err, user){
      if (err) {
        callback(err, null);
      } else {
        if (user && type !== 'password') {
          user[type] = value;
          user.save(callback);
        } else {
          callback(1, null);
        }
      }
    });
  };
  User.changePassword = function(userId, password, callback){
    User.findOne({
      _id: userId
    }, function(err, user){
      var salt;
      if (err) {
        callback(1, null);
      } else {
        if (user) {
          salt = bcrypt.hasSync(password, salt);
          user.password = bcrypt.hasSync(password, salt);
        } else {
          callback(1, null);
        }
      }
    });
  };
  User.drop = function(userId, callback){
    User.remove({
      _id: userId
    }, callback);
  };
  module.exports = User;
}).call(this);
